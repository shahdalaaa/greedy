# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K3dpW_AF5TQqNlG31yIVyumAfeCC37GL
"""

from queue import PriorityQueue

class Node:
    def __init__(self, name, heuristic):
        self.name = name
        self.heuristic = heuristic
        self.neighbors = []

    def add_neighbor(self, neighbor, cost):
        self.neighbors.append((neighbor, cost))

def greedy_best_first_search(start_node, goal_name):
    open_list = PriorityQueue()
    open_list.put((start_node.heuristic, start_node))
    visited = set()

    while not open_list.empty():

        _, current_node = open_list.get()

        print(f"Visiting Node: {current_node.name}, Heuristic: {current_node.heuristic}")

        if current_node.name == goal_name:
            print("Goal reached!")
            return True


        visited.add(current_node)


        for neighbor, _ in current_node.neighbors:
            if neighbor not in visited:
                open_list.put((neighbor.heuristic, neighbor))

    print("Goal not reachable")
    return False


if __name__ == "__main__":

    nodeA = Node("A", 4)
    nodeB = Node("B", 2)
    nodeC = Node("C", 1)
    nodeD = Node("D", 6)
    nodeE = Node("E", 0)


    nodeA.add_neighbor(nodeB, 1)
    nodeA.add_neighbor(nodeC, 4)
    nodeB.add_neighbor(nodeD, 5)
    nodeC.add_neighbor(nodeE, 1)
    nodeD.add_neighbor(nodeE, 2)


    greedy_best_first_search(nodeA, "E")